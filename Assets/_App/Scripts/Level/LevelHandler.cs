using Sirenix.OdinInspector;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

/// <summary>
/// This class is responsible for handling Levels and Experience for an object. This can be used as a container to be applied to anything that requires a m_Level and experience.
/// </summary>
[System.Serializable]
public class LevelHandler
{
    #region Global Class Variables

    /// <summary>
    /// This is a Static Default for the MAX m_Level to be generated automatically for the <see cref="experienceCurve"/>
    /// </summary>
    public static int DEFAULT_MAX_LEVEL = 100;

    /// <summary>
    /// This is a Static Default for the EXP Curve variance to be generated automatically for the <see cref="experienceCurve"/>
    /// </summary>0-
    public static int DEFAULT_BASE_EXP_CURVE = 50;

    /// <summary>
    /// This is a Static Default for the EXP Curve multiplier to be generated automatically for the <see cref="experienceCurve"/>
    /// </summary>
    public static float DEFAULT_BASE_EXP_CURVE_MULTIPLIER = 1f;

    /// <summary>
    /// This is a Static action event for handling calls for level changed.
    /// </summary>
    public static System.Action<LevelHandler,int> onLevelChanged;

    #endregion

    #region Protected Variables

    /// <summary>
    /// The current level.
    /// </summary>
    [SerializeField] protected int level = 1;

    /// <summary>
    /// The current experience.
    /// </summary>
    [SerializeField] protected int exp;

    /// <summary>
    /// This is the local Max m_Level, used to determine what is considered the MAX m_Level for this object.
    /// </summary>
    [SerializeField] protected int maxLevel = DEFAULT_MAX_LEVEL;

    /// <summary>
    /// This is the local Base Exp Curve, used to be able to easily overwrite the Experience Curve when called using the  <see cref="ChangeExpCurve"/> Method.
    /// </summary>
    [SerializeField] protected int baseExpCurve = DEFAULT_BASE_EXP_CURVE;

    /// <summary>
    /// This is the local Base Exp Curve Multiplier, used to be able to easily overwrite the Experience Curve when called using the  <see cref="ChangeExpCurve"/> Method.
    /// </summary>
    [SerializeField] protected float baseExpCurveMultiplier = DEFAULT_BASE_EXP_CURVE_MULTIPLIER;

    /// <summary>
    /// This is a list of LevelContainer types. This is an experience curve each m_Level has an amount of EXP needed for m_Level up.
    /// This is generated by default with the DEFAULT variables and can be overwritten using the <see cref="ChangeExpCurve"/> Method.
    /// </summary>
    [SerializeField] protected List<LevelContainer> experienceCurve = DefaultExpCurveList();

    #endregion

    #region Public Properties

    /// <summary>
    /// The current level property.
    /// </summary>
    public int Level
    {
        get { return level; }
        set
        {
            if (ValidateExp(value))
            {
                level = value;
            }
            else
            {
                Debug.LogWarning("INVALID LEVEL: " + value + " (Max Level: " + MaxLevel + ")");
            }

        }
    }

    /// <summary>
    /// The current experience property.
    /// </summary>
    public int Exp
    {
        get { return exp; }
        set
        {
            if (ValidateLevel(value))
            {
                exp = value;
            }
            else
            {
                Debug.LogWarning("INVALID EXP: " + value);
            }
        }
    }

    /// <summary>
    /// Gets the exp remaining to level.
    /// </summary>
    public int ExpNeededToLevel
    {
        get
        {
            if (level < maxLevel) { return experienceCurve[level].Exp - exp; }
            else { return 0; }
        }
    }

    /// <summary>
    /// Gets the exp target for the level.
    /// </summary>
    public int ExpTarget
    {
        get
        {
            if(level < maxLevel) { return experienceCurve[level].Exp; }
            else { return 0; }
            
        }
    }
    /// <summary>
    /// This is the local Max m_Level, used to determine what is considered the MAX m_Level for this object.
    /// </summary>
    public int MaxLevel
    {
        get { return maxLevel; }
        set { maxLevel = value; }
    }

    /// <summary>
    /// This is the local Base Exp Curve, used to be able to easily overwrite the Experience Curve when called using the  <see cref="ChangeExpCurve"/> Method.
    /// </summary>
    public int BaseExpCurve
    {
        get { return baseExpCurve; }
        set { baseExpCurve = value; }
    }

    /// <summary>
    /// This is the local Base Exp Curve Multiplier, used to be able to easily overwrite the Experience Curve when called using the  <see cref="ChangeExpCurve"/> Method.
    /// </summary>
    public float BaseExpCurveMultiplier
    {
        get { return baseExpCurveMultiplier; }
        set { baseExpCurveMultiplier = value; }
    }

    /// <summary>
    /// This is a list of LevelContainer types. This is an experience curve each m_Level has an amount of EXP needed for m_Level up.
    /// This is generated by default with the DEFAULT variables and can be overwritten using the <see cref="ChangeExpCurve"/> Method.
    /// </summary>
    public List<LevelContainer> ExperienceCurve
    {
        get { return experienceCurve; }
        set { experienceCurve = value; }
    }

    #endregion

    #region Public Methods

    /// <summary>
    /// SetLevel returns true if the level is set correctly.
    /// </summary>
    /// <param name="level"></param>
    /// <returns></returns>
    public bool SetLevel(int level)
    {
        if (level > maxLevel)
        {
            this.level = maxLevel;
            exp = ExperienceCurve[maxLevel - 1].Exp;
            LevelChanged(this,this.level);
            Debug.LogWarning("Setting to Max Level:" + maxLevel);
            return true;
        }
        if (level >= 1 && level <= maxLevel)
        {
            this.level = level;
            exp = ExperienceCurve[this.level - 1].Exp;
            LevelChanged(this,this.level);
            return true;
        }
        Debug.LogWarning("Invalid Level Set");
        return false;
    }
    /// <summary>
    /// GainLevel returns true if level is gained.
    /// </summary>
    /// <param name="level"></param>
    /// <returns></returns>
    public bool GainLevel(int level = 1)
    {

        if (Level + level >= maxLevel)
        {
            this.level = maxLevel;
            exp = ExperienceCurve[this.level - 1].Exp;
            LevelChanged(this,this.level);
            return true;
        }
        this.level += level;
        exp = ExperienceCurve[this.level - 1].Exp;
        LevelChanged(this,this.level);
        return true;
    }
    /// <summary>
    /// GainRandomLevel takes a min and max range and returns true if level is gained.
    /// </summary>
    /// <param name="levelmin"></param>
    /// <param name="levelmax"></param>
    /// <returns></returns>
    public bool GainRandomLevel(int levelmin, int levelmax)
    {
        var randlevel = Random.Range(levelmin, levelmax);
        if (level + randlevel >= maxLevel)
        {
            level = maxLevel;
            exp = ExperienceCurve[level - 1].Exp;
            LevelChanged(this,level);
            return true;
        }
        level += randlevel;
        exp = ExperienceCurve[level - 1].Exp;
        LevelChanged(this, level);
        return true;
    }
    /// <summary>
    /// LoseLevel returns true if a level is lost.
    /// </summary>
    /// <param name="level"></param>
    /// <returns></returns>
    public bool LoseLevel(int level = 1)
    {
        if (this.level - level <= 1)
        {
            this.level = 1;
            exp = 0;
            LevelChanged(this, 1);
            return true;
        }

        this.level -= level;
        exp = ExperienceCurve[this.level - 1].Exp;
        LevelChanged(this,this.level);
        return true;
    }
    /// <summary>
    /// LoseRandomLevel takes a min and max range and returns true if level is lost.
    /// </summary>
    /// <param name="levelmin"></param>
    /// <param name="levelmax"></param>
    /// <returns></returns>
    public bool LoseRandomLevel(int levelmin, int levelmax)
    {
        var randlevel = Random.Range(levelmin, levelmax);
        if (level - randlevel <= 1)
        {
            level = 1;
            exp = 0;
            LevelChanged(this,1);
            return true;
        }

        level -= randlevel;
        exp = ExperienceCurve[level - 1].Exp;
        LevelChanged(this,level);
        return true;
    }
    /// <summary>
    /// Set exp returns true if Exp is set correctly.
    /// </summary>
    /// <param name="exp"></param>
    /// <returns></returns>
    public bool SetExp(int exp)
    {
        if (exp >= 0)
        {
            this.exp = exp;
            ValidateLevel(this.exp);
            return true;
        }
        Debug.LogWarning("Invalid Exp Set");
        return false;
    }
    /// <summary>
    /// Gain exp returns true if Exp is gained.
    /// </summary>
    /// <param name="exp"></param>
    /// <returns></returns>
    public bool GainExp(int exp)
    {
        if (exp >= 0)
        {
            this.exp += exp;
            ValidateLevel(this.exp);
            return true;
        }
        Debug.LogWarning("GainExp invalid amount. cannot be a negative number.");
        return false;
    }

    /// <summary>
    /// Gain random between a min and max value. exp returns true if exp is gained.
    /// </summary>
    /// <param name="expmin"></param>
    /// <param name="expmax"></param>
    /// <returns></returns>
    public bool GainRandomExp(int expmin, int expmax)
    {
        var rand_exp = Random.Range(expmin, expmax);
        if (rand_exp >= 0)
        {
            exp += rand_exp;
            ValidateLevel(exp);
            return true;
        }
        Debug.LogWarning("GainRandomExp invalid amount. cannot be a negative number.");
        return false;
    }

    /// <summary>
    /// Lose random exp between a min and max value. returns true if exp is lost.
    /// </summary>
    /// <param name="expmin"></param>
    /// <param name="expmax"></param>
    /// <returns></returns>
    public bool LoseRandomExp(int expmin, int expmax)
    {
        var rand_exp = Random.Range(expmin, expmax);

        if (exp - rand_exp >= 0)
        {
            exp -= rand_exp;
            ValidateLevel(exp);
            return true;
        }
        if (Exp - rand_exp <= 0 && rand_exp > 0)
        {
            exp = 0;
            level = 1;
            LevelChanged(this,1);
            return true;
        }
        Debug.LogWarning("LoseRandomExp invalid amount. cannot be a negative number.");
        return false;
    }

    /// <summary>
    /// Lose exp returns true if exp is lost.
    /// </summary>
    /// <param name="exp"></param>
    /// <returns></returns>
    public bool LoseExp(int exp)
    {
        if (this.exp - exp >= 0)
        {
            this.exp -= exp;
            ValidateLevel(this.exp);
            return true;
        }
        if (this.exp - exp <= 0 && exp > 0)
        {
            this.exp = 0;
            level = 1;
            LevelChanged(this,1);
            return true;
        }
        Debug.LogWarning("LoseExp invalid amount. cannot be a negative number.");
        return false;
    }
    /// <summary>
    /// This is used to validate if a m_Level is gained or lost based on the amount of experience passed in. Returns true if a m_Level is gained or lost.
    /// </summary>
    /// <param name="exp"></param>
    /// <returns></returns>
    public bool ValidateLevel(int exp)
    {
        if (exp < 0)
        {
            return false;
        }
        if (exp >= ExperienceCurve[MaxLevel - 1].Exp)
        {
            Level = MaxLevel;
            return true;
        }

        //This formula calculates the Level based on the experience using a quadratic equation to solve for the level.
        // Example, if the Curve = 50, and the multiplier = 1. and the amount of EXP that is being checked is 100.
        // NOTE: level 1 requires 100 exp to level with this curve and multiplier.
        // the formula is as follows:  50 + sqrt( (50*50) + (4 * 50 * 100) ) / (2 * 50)
        // (50*50) + (4 * 50 * 100) = 2500 + 20000 = 22500
        // the Square Root of 22500 is 150
        // Breaks down to (50 + 150) / 100
        // 200 / 100 = 2 (this is the level for the experience, which means the level can equal this formula.)
        float curve_multi = BaseExpCurve * BaseExpCurveMultiplier;
        var calc = (curve_multi + Mathf.Sqrt((curve_multi * curve_multi) + (4 * curve_multi * exp))) / (2 * curve_multi);
        var oldLevel = level;
        level = (int)calc;
        if (oldLevel != level)
        {
            LevelChanged(this,level);
        }
        return true;
    }

    /// <summary>
    /// This is used to validate if a m_Level is gained or lost based on the amount of experience. Returns true if a m_Level is gained or lost.
    /// </summary>
    /// <returns></returns>
    public bool ValidateLevel()
    {
        if (exp < 0)
        {
            return false;
        }

        if (exp >= ExperienceCurve[MaxLevel - 1].Exp)
        {
            Level = MaxLevel;
            return true;
        }

        //This formula calculates the Level based on the experience using a quadratic equation to solve for the level.
        // Example, if the Curve = 50, and the multiplier = 1. and the amount of EXP that is being checked is 100.
        // NOTE: level 1 requires 100 exp to level with this curve and multiplier.
        // the formula is as follows:  50 + sqrt( (50*50) + (4 * 50 * 100) ) / (2 * 50)
        // (50*50) + (4 * 50 * 100) = 2500 + 20000 = 22500
        // the Square Root of 22500 is 150
        // Breaks down to (50 + 150) / 100
        // 200 / 100 = 2 (this is the level for the experience, which means the level can equal this formula.)
        float curve_multi = BaseExpCurve * BaseExpCurveMultiplier;
        var calc = (curve_multi + Mathf.Sqrt((curve_multi * curve_multi) + (4 * curve_multi * exp))) / (2 * curve_multi);
        var oldLevel = level;
        level = (int)calc;
        if(oldLevel != level)
        {
            LevelChanged(this,level);
        }
        return true;
    }


    /// <summary>
    /// This is used to validate if the experience based on the m_Level provided. Returns true if a experience is gained or lost.
    /// </summary>
    /// <param name="level"></param>
    /// <returns></returns>
    public bool ValidateExp(int level)
    {
        if (level < 1 || level > maxLevel)
        {
            return false;
        }
        if (level == maxLevel)
        {
            exp = ExperienceCurve[maxLevel - 1].Exp;
            return true;
        }
        exp = ExperienceCurve[level - 1].Exp;
        return true;
    }

    /// <summary>
    /// This is used to validate if the experience based on the m_Level. Returns true if a experience is gained or lost.
    /// </summary>
    /// <returns></returns>
    public bool ValidateExp()
    {
        if (level < 1 || level > maxLevel)
        {
            return false;
        }
        if (level == maxLevel)
        {
            exp = ExperienceCurve[MaxLevel - 1].Exp;
            return true;
        }
        exp = ExperienceCurve[level - 1].Exp;
        return true;
    }



    /// <summary>
    /// <para>This is used to change the Exp Curve based Max Level, Exp Curve and Exp Curve Multiplier</para>
    /// <para>the formula used is List_Index * _exp_curve * _exp_curve_multiplier * level (Level is List_Index + 1)</para>
    /// <example>
    /// <para>EXAMPLE: ChangeExpCurve(5, 10, 1) Produces-> Level: 1 Exp: 0, Level: 2 Exp: 20, Level: 3 Exp: 60, Level: 4 Exp: 120, Level: 5 Exp: 200</para>
    /// <para>
    /// EXAMPLE: ChangeExpCurve(100, 50, 1) Produces-> Level: 1 Exp: 0, Level: 2 Exp: 100, Level: 3 Exp: 300, Level: 4 Exp: 600, Level: 5 Exp: 1000 ....
    /// Level: 96 Exp: 456000 Level: 97 Exp: 465600, Level: 98 Exp: 475300, Level: 99 Exp: 485100, Level: 100 Exp: 495000
    /// </para>
    /// </example>
    /// </summary>
    /// <param name="maxLevel"></param>
    /// <param name="expCurve"></param>
    /// <param name="expCurveMultiplier"></param>
    public void ChangeExpCurve(int maxLevel, int expCurve, float expCurveMultiplier = 1)
    {
        this.maxLevel = maxLevel;
        BaseExpCurve = expCurve;
        BaseExpCurveMultiplier = expCurveMultiplier;
        ExperienceCurve.Clear();
        for (int i = 0; i < maxLevel; i++)
        {
            var level = i + 1;
            var exp_formula = i * expCurve * expCurveMultiplier * level;
            ExperienceCurve.Add(new LevelContainer(level, exp_formula));
        }
    }

    #endregion

    #region Public Static Methods

    /// <summary>
    /// This Returns a Experience Curve List based on the Default Curve Variables.
    /// <para>the formula used is List_Index * _exp_curve * _exp_curve_multiplier * level (Level is List_Index + 1)</para>
    /// <para>EXAMPLE: DEFAULT_MAX_LEVEL = 100, DEFAULT_BASE_EXP_CURVE = 50, DEFAULT_BASE_EXP_CURVE_MULTIPLIER = 1</para> 
    /// <para>
    /// Produces-> Level: 1 Exp: 0, Level: 2 Exp: 100, Level: 3 Exp: 300, Level: 4 Exp: 600, Level: 5 Exp: 1000 ....
    /// Level: 96 Exp: 456000 Level: 97 Exp: 465600, Level: 98 Exp: 475300, Level: 99 Exp: 485100, Level: 100 Exp: 495000
    /// </para> 
    /// </summary>
    /// <returns></returns>
    public static List<LevelContainer> DefaultExpCurveList()
    {
        List<LevelContainer> levelslist = new List<LevelContainer>();
        for (int i = 0; i < DEFAULT_MAX_LEVEL; i++)
        {
            var level = i + 1;
            var exp_formula = i * DEFAULT_BASE_EXP_CURVE * DEFAULT_BASE_EXP_CURVE_MULTIPLIER * level;
            levelslist.Add(new LevelContainer(level, exp_formula));
        }
        return levelslist;
    }

    /// <summary>
    /// This Returns a Experience Curve List based on the  <see cref="_max_level"/>, <see cref="_exp_curve"/>, <see cref="_exp_curve_modifier"/> Parameters.
    /// <para>the formula used is List_Index * _exp_curve * _exp_curve_multiplier * level (Level is List_Index + 1)</para>
    /// <para>EXAMPLE: _MaxLevel = 100, _ExpCurve = 50, _ExpCurveModifier = 1</para> 
    /// <para>
    /// Produces-> Level: 1 Exp: 0, Level: 2 Exp: 100, Level: 3 Exp: 300, Level: 4 Exp: 600, Level: 5 Exp: 1000 ....
    /// Level: 96 Exp: 456000 Level: 97 Exp: 465600, Level: 98 Exp: 475300, Level: 99 Exp: 485100, Level: 100 Exp: 495000
    /// </para> 
    /// </summary>
    /// <param name="maxLevel"></param>
    /// <param name="expCurve"></param>
    /// <param name="expCurveMultiplier"></param>
    /// <returns></returns>
    public static List<LevelContainer> CustomExpCurveList(int maxLevel, int expCurve, float expCurveMultiplier = 1)
    {
        List<LevelContainer> levelslist = new List<LevelContainer>();
        for (int i = 0; i < maxLevel; i++)
        {
            var level = i + 1;
            var exp_formula = i * expCurve * expCurveMultiplier * level;
            levelslist.Add(new LevelContainer(level, exp_formula));
        }
        return levelslist;
    }

    /// <summary>
    /// This overrides the + Operator to be able to add LevelHandlers together it will set the exp combined of the other level handlers and then set the correct level.
    /// </summary>
    /// <param name="level1"></param>
    /// <param name="level2"></param>
    /// <returns></returns>
    public static LevelHandler operator +(LevelHandler level1, LevelHandler level2)
    {
        var expCombined = level1.exp + level2.exp;
        var lh = new LevelHandler();
        lh.exp = expCombined;
        lh.ValidateLevel(expCombined);
        return lh;
    }

    /// <summary>
    /// This overrides the - Operator to be able to subtract LevelHandlers it will set the exp of the other level handlers and then set the correct level.
    /// </summary>
    /// <param name="level1"></param>
    /// <param name="level2"></param>
    /// <returns></returns>
    public static LevelHandler operator -(LevelHandler level1, LevelHandler level2)
    {
        var expSubtracted = level1.exp - level2.exp;
        var lh = new LevelHandler();
        lh.exp = expSubtracted;
        lh.ValidateLevel(expSubtracted);
        return lh;
    }

    /// <summary>
    /// This static method invokes the <see cref="onLevelChanged"/> event.
    /// </summary>
    /// <param name="val"></param>
    public static void LevelChanged(LevelHandler handler, int val) { onLevelChanged.Invoke(handler, val); }

    #endregion

    [Button]
    public void ChangeExpCurveButton()
    {
        ChangeExpCurve(maxLevel, baseExpCurve, baseExpCurveMultiplier);
    }

}
